// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/core.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFilesPort is a mock of FilesPort interface.
type MockFilesPort struct {
	ctrl     *gomock.Controller
	recorder *MockFilesPortMockRecorder
}

// MockFilesPortMockRecorder is the mock recorder for MockFilesPort.
type MockFilesPortMockRecorder struct {
	mock *MockFilesPort
}

// NewMockFilesPort creates a new mock instance.
func NewMockFilesPort(ctrl *gomock.Controller) *MockFilesPort {
	mock := &MockFilesPort{ctrl: ctrl}
	mock.recorder = &MockFilesPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesPort) EXPECT() *MockFilesPortMockRecorder {
	return m.recorder
}

// FindString mocks base method.
func (m *MockFilesPort) FindString(s string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindString", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindString indicates an expected call of FindString.
func (mr *MockFilesPortMockRecorder) FindString(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindString", reflect.TypeOf((*MockFilesPort)(nil).FindString), s)
}

// List mocks base method.
func (m *MockFilesPort) List() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockFilesPortMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFilesPort)(nil).List))
}
